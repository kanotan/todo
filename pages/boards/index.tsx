import Amplify, { API, Auth, withSSRContext } from 'aws-amplify';
import { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql'
import awsExports from "../../src/aws-exports";
import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import React from 'react';
// @ts-ignore
import styles from '../../styles/Home.module.css'
import { listBoards } from '../../src/graphql/queries';
import { createBoard } from '../../src/graphql/mutations';
import { Board } from '../../src/API';
import { AuthState, onAuthUIStateChange } from '@aws-amplify/ui-components';
import { AmplifyAuthenticator, AmplifySignUp, AmplifySignOut } from '@aws-amplify/ui-react';

Amplify.configure({ ...awsExports, ssr: true });

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const SSR = withSSRContext({ req });
  const response = await SSR.API.graphql({ query: listBoards });

  return {
    props: {
      boards: response.data.listBoards.items,
    },
  };
}

const App = ({ boards = [] }: { boards: Board[] }) => {
  const [authState, setAuthState] = React.useState<AuthState>();
  const [user, setUser] = React.useState<object | undefined>();
  const handleCreateBoard = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const form = new FormData(event.currentTarget);

    try {
      const result = await API.graphql({
        authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,
        query: createBoard,
        variables: {
          input: {
            name: form.get("name"),
            // @ts-ignore
            owner: user.username
          },
        },
      });
      window.location.href = `/boards`;
    } catch ({ errors }) {
      // @ts-ignore
      console.error(...errors);
      // @ts-ignore
      throw new Error(errors[0].message);
    }
  }

  React.useEffect(() => {
    return onAuthUIStateChange((nextAuthState, authData) => {
      setAuthState(nextAuthState);
      setUser(authData);
    });
  }, []);

  return authState === AuthState.SignedIn && user ? (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <header className={styles.header}>
        <Link href="/" passHref>
          <h1 className={styles.title}>Todoリスト</h1>
        </Link>
        <AmplifySignOut />
      </header>

      <main className={styles.main}>
        <h2 className={styles.title}>
          ボード一覧
        </h2>

        <div className={styles.grid}>
          <div className={styles.card}>
            <h2>新規作成</h2>
            <form onSubmit={handleCreateBoard}>
              <fieldset>
                <legend>ボード名</legend>
                <input name="name" />
              </fieldset>

              <button>作成</button>
            </form>
          </div>
        </div>

        <div className={styles.grid}>
          {boards.map((board) => (
            <a className={styles.card} href={`/boards/${board.id}`} key={board.id}>
              <h2>{board.name}</h2>
              <p>作者：{board.owner}</p>
            </a>
          ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  ) : (
    <AmplifyAuthenticator>
      <AmplifySignUp
        slot="sign-up"
        formFields={[
          { type: "username" },
          { type: "email" },
          { type: "password" }
        ]}
      />
    </AmplifyAuthenticator>
  );
}

export default App